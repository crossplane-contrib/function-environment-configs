//go:build !ignore_autogenerated

// Code generated by controller-gen. DO NOT EDIT.

package v1beta1

import (
	commonv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnvironmentSource) DeepCopyInto(out *EnvironmentSource) {
	*out = *in
	if in.Ref != nil {
		in, out := &in.Ref, &out.Ref
		*out = new(EnvironmentSourceReference)
		**out = **in
	}
	if in.Selector != nil {
		in, out := &in.Selector, &out.Selector
		*out = new(EnvironmentSourceSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnvironmentSource.
func (in *EnvironmentSource) DeepCopy() *EnvironmentSource {
	if in == nil {
		return nil
	}
	out := new(EnvironmentSource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnvironmentSourceReference) DeepCopyInto(out *EnvironmentSourceReference) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnvironmentSourceReference.
func (in *EnvironmentSourceReference) DeepCopy() *EnvironmentSourceReference {
	if in == nil {
		return nil
	}
	out := new(EnvironmentSourceReference)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnvironmentSourceSelector) DeepCopyInto(out *EnvironmentSourceSelector) {
	*out = *in
	if in.MaxMatch != nil {
		in, out := &in.MaxMatch, &out.MaxMatch
		*out = new(uint64)
		**out = **in
	}
	if in.MinMatch != nil {
		in, out := &in.MinMatch, &out.MinMatch
		*out = new(uint64)
		**out = **in
	}
	if in.MatchLabels != nil {
		in, out := &in.MatchLabels, &out.MatchLabels
		*out = make([]EnvironmentSourceSelectorLabelMatcher, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnvironmentSourceSelector.
func (in *EnvironmentSourceSelector) DeepCopy() *EnvironmentSourceSelector {
	if in == nil {
		return nil
	}
	out := new(EnvironmentSourceSelector)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnvironmentSourceSelectorLabelMatcher) DeepCopyInto(out *EnvironmentSourceSelectorLabelMatcher) {
	*out = *in
	if in.ValueFromFieldPath != nil {
		in, out := &in.ValueFromFieldPath, &out.ValueFromFieldPath
		*out = new(string)
		**out = **in
	}
	if in.FromFieldPathPolicy != nil {
		in, out := &in.FromFieldPathPolicy, &out.FromFieldPathPolicy
		*out = new(FromFieldPathPolicy)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnvironmentSourceSelectorLabelMatcher.
func (in *EnvironmentSourceSelectorLabelMatcher) DeepCopy() *EnvironmentSourceSelectorLabelMatcher {
	if in == nil {
		return nil
	}
	out := new(EnvironmentSourceSelectorLabelMatcher)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Input) DeepCopyInto(out *Input) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Input.
func (in *Input) DeepCopy() *Input {
	if in == nil {
		return nil
	}
	out := new(Input)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Input) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InputSpec) DeepCopyInto(out *InputSpec) {
	*out = *in
	if in.DefaultData != nil {
		in, out := &in.DefaultData, &out.DefaultData
		*out = make(map[string]v1.JSON, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.EnvironmentConfigs != nil {
		in, out := &in.EnvironmentConfigs, &out.EnvironmentConfigs
		*out = make([]EnvironmentSource, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = new(Policy)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InputSpec.
func (in *InputSpec) DeepCopy() *InputSpec {
	if in == nil {
		return nil
	}
	out := new(InputSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PatchPolicy) DeepCopyInto(out *PatchPolicy) {
	*out = *in
	if in.FromFieldPath != nil {
		in, out := &in.FromFieldPath, &out.FromFieldPath
		*out = new(FromFieldPathPolicy)
		**out = **in
	}
	if in.MergeOptions != nil {
		in, out := &in.MergeOptions, &out.MergeOptions
		*out = new(commonv1.MergeOptions)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PatchPolicy.
func (in *PatchPolicy) DeepCopy() *PatchPolicy {
	if in == nil {
		return nil
	}
	out := new(PatchPolicy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Policy) DeepCopyInto(out *Policy) {
	*out = *in
	if in.Resolution != nil {
		in, out := &in.Resolution, &out.Resolution
		*out = new(commonv1.ResolutionPolicy)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Policy.
func (in *Policy) DeepCopy() *Policy {
	if in == nil {
		return nil
	}
	out := new(Policy)
	in.DeepCopyInto(out)
	return out
}
